// Code generated by xo. DO NOT EDIT.

package repository

import (
	"github.com/yjmurakami/go-kakeibo/internal/database"
	"github.com/yjmurakami/go-kakeibo/internal/entity"
)

// Generated from 'kakeibo.incomes'.
type incomeRepository struct{}

func NewIncomeRepository() *incomeRepository {
	return &incomeRepository{}
}

func (r *incomeRepository) SelectAll(db database.DB) ([]*entity.Income, error) {
	query := `
		SELECT id, user_id, date, category_id, amount, comment, created_at, modified_at
		FROM kakeibo.incomes
		ORDER BY id
	`

	rows, err := db.Query(query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	s := []*entity.Income{}
	for rows.Next() {
		e := entity.Income{}
		err = rows.Scan(&e.ID, &e.UserID, &e.Date, &e.CategoryID, &e.Amount, &e.Comment, &e.CreatedAt, &e.ModifiedAt)
		if err != nil {
			return nil, err
		}
		s = append(s, &e)
	}

	err = rows.Err()
	if err != nil {
		return nil, err
	}
	return s, nil
}

func (r *incomeRepository) Insert(db database.DB, e *entity.Income) error {
	query := `
		INSERT INTO kakeibo.incomes (
			user_id, date, category_id, amount, comment, created_at, modified_at
		) VALUES (
			?, ?, ?, ?, ?, ?, ?
		)
	`

	res, err := db.Exec(query, e.UserID, e.Date, e.CategoryID, e.Amount, e.Comment, e.CreatedAt, e.ModifiedAt)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	e.ID = int(id)
	return nil
}

func (r *incomeRepository) Update(db database.DB, e *entity.Income) error {
	query := `
		UPDATE kakeibo.incomes SET
			user_id = ?, date = ?, category_id = ?, amount = ?, comment = ?, created_at = ?, modified_at = ?
		WHERE id = ?
	`

	_, err := db.Exec(query, e.UserID, e.Date, e.CategoryID, e.Amount, e.Comment, e.CreatedAt, e.ModifiedAt, e.ID)
	return err
}

func (r *incomeRepository) Delete(db database.DB, e *entity.Income) error {
	query := `
		DELETE FROM kakeibo.incomes
		WHERE id = ?
	`

	_, err := db.Exec(query, e.ID)
	return err
}

// Generated from index 'category_id'.
func (r *incomeRepository) SelectByCategoryID(db database.DB, categoryID int) ([]*entity.Income, error) {
	query := `
		SELECT id, user_id, date, category_id, amount, comment, created_at, modified_at
		FROM kakeibo.incomes
		WHERE category_id = ?
		ORDER BY id
	`
	rows, err := db.Query(query, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	s := []*entity.Income{}
	for rows.Next() {
		e := entity.Income{}
		err = rows.Scan(&e.ID, &e.UserID, &e.Date, &e.CategoryID, &e.Amount, &e.Comment, &e.CreatedAt, &e.ModifiedAt)
		if err != nil {
			return nil, err
		}
		s = append(s, &e)
	}

	err = rows.Err()
	if err != nil {
		return nil, err
	}
	return s, nil
}

// Generated from index 'incomes_id_pkey'.
func (r *incomeRepository) SelectByID(db database.DB, id int) (*entity.Income, error) {
	query := `
		SELECT id, user_id, date, category_id, amount, comment, created_at, modified_at
		FROM kakeibo.incomes
		WHERE id = ?
	`
	e := entity.Income{}
	err := db.QueryRow(query, id).Scan(&e.ID, &e.UserID, &e.Date, &e.CategoryID, &e.Amount, &e.Comment, &e.CreatedAt, &e.ModifiedAt)
	if err != nil {
		return nil, err
	}
	return &e, nil
}

// Generated from index 'user_id'.
func (r *incomeRepository) SelectByUserID(db database.DB, userID int) ([]*entity.Income, error) {
	query := `
		SELECT id, user_id, date, category_id, amount, comment, created_at, modified_at
		FROM kakeibo.incomes
		WHERE user_id = ?
		ORDER BY id
	`
	rows, err := db.Query(query, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	s := []*entity.Income{}
	for rows.Next() {
		e := entity.Income{}
		err = rows.Scan(&e.ID, &e.UserID, &e.Date, &e.CategoryID, &e.Amount, &e.Comment, &e.CreatedAt, &e.ModifiedAt)
		if err != nil {
			return nil, err
		}
		s = append(s, &e)
	}

	err = rows.Err()
	if err != nil {
		return nil, err
	}
	return s, nil
}
